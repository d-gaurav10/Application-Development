@page "/dashboard"
@using Trackfy.Models
@using static Trackfy.Components.Layout.MainLayout
@inject IJSRuntime JS
@inject NavigationManager Navigation

<style>

    .main-content {
        margin-left: 180px;
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        height: 100vh;
    }

    
    .left-nav {
        width: 200px; /* Fixed width for the left navigation */
        background-color: #dfffd6;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
        left:0px;
        top:0px;
        position: fixed;
        height: 100vh; 
        overflow-y: auto; 
        justify-content: center;
    }

        .left-nav .logo {
            width: 100%;
            display: block;
            margin-bottom: 20px;
            text-align: center;
        }

        .left-nav nav ul {
            list-style-type: none;
            padding: 0;
            
        }

            .left-nav nav ul li {
                margin: 15px 0;
                justify-items: center;
            }

                .left-nav nav ul li a {
                    text-decoration: none;
                    color: black;
                    font-size: 18px;
                    display: flex;
                    align-items: center;
                    padding: 10px;
                    transition: background-color 0.3s ease;
                }

                    .left-nav nav ul li a:hover {
                        background-color: #d5d1d1;
                    }


 
    
 
    .second-container {
        background-color: #f1f1f1;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgb(67 64 64 / 10%);
        margin-bottom: 20px;
        margin-top: 20px;
        padding: 20px;

    }

    .header-text {
            text-align: left;
            margin:20px;
            font-size:bold;
     }
    .second-container .header-text2 {
            text-align: left;
     }
    /* Balance Box */
    .balance-box {
        text-align: center;
        padding: 15px;
        border-radius: 8px;
        color: white; 
    }

        .balance-box.available {
            background-color: #1b521d; /* Green */
            border: 2px solid #1b5212;
        }

        .balance-box.debt {
            background-color: #d32f2f; /* Red */
            border: 2px solid #dc3545;
        }

    /* Calendar Popup */
    .calendar-popup {
        position: absolute;
        background: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 15px;
        z-index: 1000;
    }

        .calendar-popup input {
            margin-bottom: 10px;
        }

    
    .summary-section {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        gap: 10px;
    }

    .summary-card {
        flex: 1;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .balance {
        background-color: #1b521d;
    }

    .inflow {
        background-color: #1b3382;
    }

    .outflow {
        background-color: #81412ff0;
    }

    .debt {
        background-color: #81412ff0;
    }

    /* Actions */
    .actions {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        gap: 10px;
    }

    .calendar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.2);
        z-index: 999;
    }

    /* Transaction Form Container */
    #transaction {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        background-color: #f8f8f8;
        padding: 20px;
        margin-bottom: 20px;
        margin-left: auto;
        margin-right: auto;

    }

    /* Form Structure */
    .transaction-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

        /* Label Styling */
        .transaction-form label {
            font-weight: bold;
            font-size: 16px;
            color: #333;
            margin-bottom: 8px;
        }

        /* Input and Select Fields Styling */
        .transaction-form input, .transaction-form select {
            padding: 12px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #ccc;
            transition: all 0.3s ease;
            background-color: #fff;
        }

            .transaction-form input:focus, .transaction-form select:focus {
                border-color: #1abc9c;
                box-shadow: 0 0 6px rgba(26, 188, 156, 0.4);
                outline: none;
            }

            /* Input and Select Hover Effects */
            .transaction-form input:hover, .transaction-form select:hover {
                border-color: #16a085;
                background-color: #f1f1f1;
            }

        /* Button Styling */
        .transaction-form button {
            background-color: #1abc9c;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 6px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

            .transaction-form button:hover {
                background-color: #16a085;
                transform: scale(1.05);
            }

            .transaction-form button:focus {
                outline: none;
            }

        /* Placeholder Styling */
        .transaction-form input::placeholder {
            color: #aaa;
            font-style: italic;
        }

  

    

        .second-container h5 {
            text-align: center;
            margin-bottom: 15px;
            font-size: 1.5rem;
            color: #343a40;
        }

    .sub-container {
        margin-bottom: 20px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

        .sub-container label {
            font-weight: bold;
            font-size: 1.1rem;
            display: block;
            margin-bottom: 5px;
            color: #495057;
        }

    .tag-display {
        font-size: 1.4rem;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 10px;
        text-align: center;
    }

    .table-responsive {
        max-height: 300px;
        overflow-y: auto;
    }

    .table {
        margin-bottom: 0;
        width: 100%;
        text-align: center;
        border-collapse: collapse;
    }

    .table-bordered {
        border: 2px solid #dee2e6;
    }

        .table-bordered th,
        .table-bordered td {
            text-align: center;
            vertical-align: middle;
            padding: 8px;
            border: 2px solid #dee2e6;
        }

    .table-light th {
        background-color: #f8f9fa;
        color: #495057;
        font-weight: bold;
    }

    .table tbody tr:nth-child(odd) {
        background-color: #f1f3f5;
    }

    .table tbody tr:nth-child(even) {
        background-color: #fff;
    }

    /* Logout Button */
    .logout-button {
        position: absolute; /* Position the button absolutely within its container */
        top: 50px; /* Distance from the top */
        left: 0px; /* Distance from the right */
        padding: 10px 20px;
        background-color: #dc3545; /* Red color for danger */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }

        .logout-button:hover {
            background-color: #c82333; /* Darker red on hover */
        }
    /* Action Buttons Container */
    .d-flex {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        margin-top: 20px;
    }

        /* Button Styling */
        .d-flex .btn {
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            border-radius: 8px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        /* Primary Button */
        .d-flex .btn-primary {
            background-color: #1abc9c;
            color: white;
            border: 1px solid #16a085;
        }

            .d-flex .btn-primary:hover {
                background-color: #16a085;
                transform: scale(1.05);
            }

            .d-flex .btn-primary:focus {
                outline: none;
            }

        /* Secondary Button */
        .d-flex .btn-secondary {
            background-color: #f1f1f1;
            color: #333;
            border: 1px solid #ccc;
        }

            .d-flex .btn-secondary:hover {
                background-color: #e0e0e0;
                transform: scale(1.05);
            }

            .d-flex .btn-secondary:focus {
                outline: none;
            }

        /* Icon Styling */
        .d-flex .btn i {
            margin-left: 5px;
        }

    
</style>

<!-- Main Dashboard Layout -->
<div class="container">
    <!-- Nav -->
    <div class="left-nav">
        <img src="logo.svg" alt="Trackify Logo" class="logo" />
        <nav>
            <ul>
                <li>
                    <a href="#mainhome">
                        <i class="icon bi bi-house-door-fill"></i>
                        Home
                    </a>
                </li>
                <li>
                    <a href="#transaction">
                        <i class="icon bi bi-wallet-fill"></i>
                        Transaction
                    </a>
                </li>
                <li>
                    <a href="#debt">
                        <i class="icon bi bi-currency-dollar"></i>
                        Debt
                    </a>
                </li>
                <li>
                    <a href="/setting">
                        <i class="icon bi bi-gear-fill"></i>
                        Setting
                    </a>
                </li>
                <li>
                    <a href="">
                        <i class="icon bi bi-gear-fill"></i>
                        <button class="btn btn-danger" @onclick="Logout">Logout</button>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <header>
            <h2 class="header-text">Dashboard</h2>
        </header>
    
        <!-- User Info Section -->
        <div id="mainhome">
        <div class="second-container">
        <h5 class="header-text2">User Info & Actions</h5>
            <div class="row mb-3">
                <!-- Available Balance -->
                <div class="col-md-6">
                    <div class="balance-box available">
                        <h6>Available Balance</h6>
                    <p class="fs-4 fw-bold">@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser): @GetUserAvailableBalance().ToString("N2")</p>
                    </div>
                </div>
                <!-- Debt Balance -->
                <div class="col-md-6">
                    <div class="balance-box debt">
                        <h6>Debt Balance</h6>
                        <p class="fs-4 fw-bold">@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser): @GetUserDebtBalance().ToString("N2")</p>
                    </div>
                </div>
            </div>
        

        <!-- Summary Section -->
        <div class="summary-section">
            
            <div class="summary-card inflow">
                <p>Total Cash Inflow</p>
                    <h2>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser): @TotalInflow.ToString("N2")</h2>
            </div>
            <div class="summary-card outflow">
                <p>Total Cash Outflow</p>
                    <h2>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser): @TotalOutflow.ToString("N2")</h2>
            </div>
           
        </div>
  
        </div>

    <!-- Date Range Picker Popup -->
    @if (IsDateRangePickerVisible)
    {
        <div class="calendar-overlay" @onclick="ToggleDateRangePicker"></div>
        <div class="calendar-popup">
            <h6>Select Date Range</h6>
            <label>From Date:</label>
            <input type="date" class="form-control" @bind="FromDate" />
            <label>To Date:</label>
            <input type="date" class="form-control" @bind="ToDate" />
        </div>
    }

    <!-- Container 2: Transaction Form -->
    <div id="transaction">
    <div class="second-container">
            <h5 class="header-text2">Transaction Form</h5>
            <form class="transaction-form">
            <label>Select Transaction Flow</label>
            <select class="form-select" @bind="TransactionsFlow">
                <option selected>Select the transaction flow</option>
                <option value="In">In</option>
                <option value="Out">Out</option>
            </select>

            <label>Select Transaction Type</label>
            <select class="form-select" @bind="TransactionsType">
                <option selected>Select the transaction type</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
            </select>

            <label>Enter Transaction Date</label>
            <input type="date" @bind="TransactionsDate" class="form-control" />

            <label>Enter Transaction Amount</label>
            <input type="number" @bind="TransactionsAmount" class="form-control" placeholder="Enter amount" />

            <label>Enter Transaction Note</label>
            <input type="text" @bind="TransactionsNote" class="form-control" placeholder="Enter note" />

            <label>Enter Transaction Title</label>
            <input type="text" @bind="TransactionsTittle" class="form-control" placeholder="Enter title" />

            <label>Enter Transaction Source</label>
            <input type="text" @bind="TransactionsSource" class="form-control" placeholder="Enter source" />

            <label>Enter Transaction ID (For Update Only)</label>
            <input type="text" @bind="TransactionsId" class="form-control" placeholder="Enter transaction ID" />

            <label>Enter Debt ID (For Update Only)</label>
            <input type="text" @bind="DebtId" class="form-control" placeholder="Enter debt ID" />

            <button type="button" @onclick="DoTransactions" class="btn btn-success w-100 mt-3">Submit Transaction</button>
        </form>
    </div>

        </div>
    <!-- Action Buttons -->
    <div class="d-flex flex-wrap gap-2 justify-content-center">
        <button class="btn btn-primary" @onclick="ToggleDateRangePicker">Sort <i class="bi bi-calendar"></i></button>
        <button class="btn btn-secondary" @onclick="UpdateTittleTransactions">Transaction Title Update</button>
        <button class="btn btn-secondary" @onclick="UpdateNoteTransactions">Update your transactions Note</button>
        <button class="btn btn-secondary" @onclick="UpdateTittleDebt">Title Update for debt</button>
        <button class="btn btn-secondary" @onclick="UpdateNoteDebt">Update debt Note </button>
        <button class="btn btn-secondary" @onclick="CheckOutflow">Check Outflow</button>
        <button class="btn btn-secondary" @onclick="ClearDebt">Clear Debt</button>
       
    </div>
</div>
    <!-- Container 3: Transactions Details -->
    <div class="second-container">
        <h5 class="header-text2">Transaction Details</h5>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <!-- Label -->
            <label class="fw-bold">All Transactions</label>
            <!-- Search Field -->
            <input type="text" class="form-control w-50" placeholder="Search by title" @bind="SearchTittleTransactions" />
            <!-- Sort Dropdown -->
            <select class="form-select w-auto" @bind="SortTansactionsType">
                <option selected >Select filter type.</option>
                <option value="Credit">Credit</option>
                <option value="Debit">Debit</option>
                <option value="Debt">Debt</option>
            </select>
        </div>

        <!-- Transactions Table -->
        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table class="table table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Title</th>
                        <th>Flow</th>
                        <th>Date</th>
                        <th>Source</th>
                        <th>Note</th>
                        <th>Amount</th>
                        <th>Username</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        if(
                            !FromDate.HasValue && !ToDate.HasValue &&
                            !String.IsNullOrEmpty(SearchTittleTransactions) &&
                        !String.IsNullOrEmpty(SortTansactionsType)

                        
                        )
                        {
                            @foreach (var data in requiredDetails.transactions_info_list.ToList())
                            {
                                <tr>
                                    <td>@data.TrId</td>
                                    <td>@data.TrType</td>
                                    <td>@data.TrTitle</td>
                                    <td>@data.TrFlow</td>
                                    <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                    <td>@data.TrSource</td>
                                    <td>@data.TrNote</td>
                                    <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                    <td>@data.UserUsername</td>
                                </tr>
                            }
                        }
                        else
                        {
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                            else if (!String.IsNullOrEmpty(SearchTittleTransactions))
                                {
                                    var user_data = requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrTitle == SearchTittleTransactions).ToList();
                                    if (user_data != null)
                                    {
                                        @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrTitle == SearchTittleTransactions).ToList())
                                        {
                                            <tr>
                                                <td>@data.TrId</td>
                                                <td>@data.TrType</td>
                                                <td>@data.TrTitle</td>
                                                <td>@data.TrFlow</td>
                                                <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                                <td>@data.TrSource</td>
                                                <td>@data.TrNote</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                                <td>@data.UserUsername</td>
                                            </tr>
                                        }
                                    }

                                    else
                                    {
                                        <tr>

                                            <td>No data available of that tittle..</td>

                                        </tr>
                                    }

                                }

                                else if(!String.IsNullOrEmpty(SortTansactionsType))
                                {
                                    var user_data = requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrType == SortTansactionsType).ToList();
                                    if (user_data != null)
                                    {
                                        @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrType == SortTansactionsType).ToList())
                                        {
                                            <tr>
                                                <td>@data.TrId</td>
                                                <td>@data.TrType</td>
                                                <td>@data.TrTitle</td>
                                                <td>@data.TrFlow</td>
                                                <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                                <td>@data.TrSource</td>
                                                <td>@data.TrNote</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                                <td>@data.UserUsername</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {

                                        <tr>

                                            <td>No data available of that type.</td>

                                        </tr>
                                    }

                                }
                           else
                                {
                                    @foreach (var data in requiredDetails.transactions_info_list.ToList())
                                    {
                                        <tr>
                                            <td>@data.TrId</td>
                                            <td>@data.TrType</td>
                                            <td>@data.TrTitle</td>
                                            <td>@data.TrFlow</td>
                                            <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                            <td>@data.TrSource</td>
                                            <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                            <td>@data.UserUsername</td>
                                        </tr>
                                    }
                                }

                       

                        }
                   

                    }

                </tbody>
            </table>
        </div>
    </div>

    <!-- Container 4: Debt Transactions Details -->
    <div id="debt">
    <div class="second-container">
        <h5 class="header-text2">Debt Transactions Details</h5>

        <!-- Section 1: All Debt Transactions -->
        <div class="mb-4">
            <label class="fw-bold">All Debt Transactions</label>
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Debt ID</th>
                            <th>Transaction Type</th>
                            <th>Debt Title</th>
                            <th>Debt Date</th>
                            <th>Debt Source</th>
                            <th>Debt Amount</th>
                            <th>Transaction Flow</th>
                            <th>Debt Status</th>
                            <th>Transaction Status</th>
                            <th>Username</th>
                            <th>Debt Note</th>

                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.debt_info_list.Where(x => x.DebtDate >= FromDate && x.DebtDate <= ToDate).ToList())
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }
                            else{
                                @foreach (var data in requiredDetails.debt_info_list.ToList())
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }

                        }


                        <!-- Additional rows dynamically generated -->
                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Section 2: Pending Debt to Pay -->
        <div class="mb-4">
            <div class="second-container">
            <label class="fw-bold">Pending Debt to Pay</label>
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Debt ID</th>
                            <th>Transaction Type</th>
                            <th>Debt Title</th>
                            <th>Debt Date</th>
                            <th>Debt Source</th>
                            <th>Debt Amount</th>
                            <th>Transaction Flow</th>
                            <th>Debt Status</th>
                            <th>Transaction Status</th>
                            <th>Username</th>
                            <th>Debt Note</th>
                        </tr>
                    </thead>
                    <tbody>

                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.debt_info_list.Where(x => x.DebtDate >= FromDate && x.DebtDate <= ToDate && x.DebtStatus=="to pay").ToList())
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }
                            else{
                                @foreach (var data in requiredDetails.debt_info_list.Where(debt => debt.DebtStatus == "to pay"))
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }

                        }


                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Section 3: Clear Debt -->
        <div class="mb-4">
            <div class="second-container">
            <label class="fw-bold">Clear Debt</label>
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>Debt ID</th>
                            <th>Transaction Type</th>
                            <th>Debt Title</th>
                            <th>Debt Date</th>
                            <th>Debt Source</th>
                            <th>Debt Amount</th>
                            <th>Transaction Flow</th>
                            <th>Debt Status</th>
                            <th>Transaction Status</th>
                            <th>Username</th>
                            <th>Debt Note</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.debt_info_list.Where(x => x.DebtDate >= FromDate && x.DebtDate <= ToDate && x.DebtStatus == "paid").ToList())
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }
                            else{
                                @foreach (var data in requiredDetails.debt_info_list.Where(debt => debt.DebtStatus == "paid"))
                                {
                                    <tr>
                                        <td>@data.DebtId</td>
                                        <td>@data.TransactionType</td>
                                        <td>@data.DebtTitle</td>
                                        <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.DebtSource</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                        <td>@data.TransactionFlow</td>
                                        <td>@data.DebtStatus</td>
                                        <td>@data.TransactionStatus</td>
                                        <td>@data.Username</td>
                                        <td>@data.DebtNote</td>
                                    </tr>
                                }
                            }

                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    </div>
    <!-- Container 5: Total Inflow, Outflow, and Highlights -->
    <div class="mb-4">
           
    <div class="second-container">
        <h5 class="header-text2">Total Inflow, Outflow, and Highlights</h5>

        <!-- Total Inflow -->
        <div class="sub-container">
            <label>Total Inflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser : @TotalInflow</p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername==requiredDetails.CurrentUserUsername && x.TrFlow=="In").ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "In").ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }

                    </tbody>
                </table>
            </div>
        </div>
</div>
        <!-- Total Outflow -->
        <div class="mb-4">
            
        <div class="sub-container">
            <label>Total Outflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser : @TotalOutflow </p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>

                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out").ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out").ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }

                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Highest Inflow -->
        <div class="mb-4">
           
        <div class="sub-container">
            <label>Highest Inflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser : @HighestInflowTransaction</p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>

                    </thead>
                    <tbody>

                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "In" && x.TrAmount.ToString() == HighestInflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "In" && x.TrAmount.ToString() == HighestInflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }

                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Lowest Inflow -->
        <div class="mb-4">
        <div class="sub-container">
            <label>Lowest Inflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser : @LowestInflowTransaction</p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>

                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "In" && x.TrAmount.ToString() == LowestInflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "In" && x.TrAmount.ToString() == LowestInflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }
                        <!-- Data dynamically populated -->

                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Highest Outflow -->
        <div class="mb-4">
        <div class="sub-container">
            <label>Highest Outflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser: @HighestOutflowTransaction</p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out" && x.TrAmount.ToString() == HighestOutflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out" && x.TrAmount.ToString() == HighestOutflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }

                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Lowest Outflow -->
        <div class="mb-4">
        <div class="sub-container">
            <label>Lowest Outflow:</label>
            <p class="tag-display">@requiredDetails.CurrencyTypeUser : @LowestOutflowTransaction</p>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Flow</th>
                            <th>Date</th>
                            <th>Source</th>
                            <th>Note</th>
                            <th>Amount</th>
                            <th>Username</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            if (FromDate.HasValue && ToDate.HasValue)
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.TrDate >= FromDate && x.TrDate <= ToDate && x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out" && x.TrAmount.ToString() == LowestOutflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                @foreach (var data in requiredDetails.transactions_info_list.Where(x => x.UserUsername == requiredDetails.CurrentUserUsername && x.TrFlow == "Out" && x.TrAmount.ToString() == LowestOutflowTransaction.ToString()).ToList())
                                {
                                    <tr>
                                        <td>@data.TrId</td>
                                        <td>@data.TrType</td>
                                        <td>@data.TrTitle</td>
                                        <td>@data.TrFlow</td>
                                        <td>@data.TrDate.ToString("yyyy-MM-dd")</td>
                                        <td>@data.TrSource</td>
                                        <td>@data.TrNote</td>
                                        <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.TrAmount</td>
                                        <td>@data.UserUsername</td>
                                    </tr>
                                }
                            }

                        }


                    </tbody>
                </table>
            </div>
        </div>
        </div>
        <!-- Container for Debt Transactions (Highest and Lowest Debts) -->
        <div class="mb-4">
        <div class="second-container">
            <h5>Debt Transactions Details</h5>

            <!-- Section 1: Lowest Debt -->
            <div class="mb-4">
                <label class="fw-bold">Lowest Debt</label>
                <p class="tag-display" id="lowest-debt-amount">@requiredDetails.CurrencyTypeUser : @LowestDebt</p>
                <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Debt ID</th>
                                <th>Transaction Type</th>
                                <th>Debt Title</th>
                                <th>Debt Date</th>
                                <th>Debt Source</th>
                                <th>Debt Amount</th>
                                <th>Transaction Flow</th>
                                <th>Debt Status</th>
                                <th>Transaction Status</th>
                                <th>Username</th>
                                <th>Debt Note</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (FromDate.HasValue && ToDate.HasValue)
                                {
                                    @foreach (var data in requiredDetails.debt_info_list.Where(x => x.DebtDate >= FromDate && x.DebtDate <= ToDate && x.Username == requiredDetails.CurrentUserUsername && x.TransactionType == "Debt" && x.DebtAmount.ToString() == LowestDebt.ToString()).ToList())
                                    {
                                        <tr>
                                            <td>@data.DebtId</td>
                                            <td>@data.TransactionType</td>
                                            <td>@data.DebtTitle</td>
                                            <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                            <td>@data.DebtSource</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                            <td>@data.TransactionFlow</td>
                                            <td>@data.DebtStatus</td>
                                            <td>@data.TransactionStatus</td>
                                            <td>@data.Username</td>
                                            <td>@data.DebtNote</td>
                                        </tr>
                                    }
                                }
                                else{
                                    @foreach (var data in requiredDetails.debt_info_list.Where(x => x.Username == requiredDetails.CurrentUserUsername && x.TransactionType == "Debt" && x.DebtAmount.ToString() == LowestDebt.ToString()).ToList())
                                    {
                                        <tr>
                                            <td>@data.DebtId</td>
                                            <td>@data.TransactionType</td>
                                            <td>@data.DebtTitle</td>
                                            <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                            <td>@data.DebtSource</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                            <td>@data.TransactionFlow</td>
                                            <td>@data.DebtStatus</td>
                                            <td>@data.TransactionStatus</td>
                                            <td>@data.Username</td>
                                            <td>@data.DebtNote</td>
                                        </tr>
                                    }
                                }

                            }

                        </tbody>
                    </table>
                </div>
            </div>
            </div>
            <!-- Section 2: Highest Debt -->
            <div class="mb-4">
                    <div class="second-container">
                <label class="fw-bold">Highest Debt</label>
                <p class="tag-display" id="highest-debt-amount">@requiredDetails.CurrencyTypeUser : @HighestDebt</p>
                <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                    <table class="table table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Debt ID</th>
                                <th>Transaction Type</th>
                                <th>Debt Title</th>
                                <th>Debt Date</th>
                                <th>Debt Source</th>
                                <th>Debt Amount</th>
                                <th>Transaction Flow</th>
                                <th>Debt Status</th>
                                <th>Transaction Status</th>
                                <th>Username</th>
                                <th>Debt Note</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (FromDate.HasValue && ToDate.HasValue)
                                {
                                    @foreach (var data in requiredDetails.debt_info_list.Where(x => x.DebtDate >= FromDate && x.DebtDate <= ToDate && x.Username == requiredDetails.CurrentUserUsername && x.TransactionType == "Debt" && x.DebtAmount.ToString() == HighestDebt.ToString()).ToList())
                                    {
                                        <tr>
                                            <td>@data.DebtId</td>
                                            <td>@data.TransactionType</td>
                                            <td>@data.DebtTitle</td>
                                            <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                            <td>@data.DebtSource</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                            <td>@data.TransactionFlow</td>
                                            <td>@data.DebtStatus</td>
                                            <td>@data.TransactionStatus</td>
                                            <td>@data.Username</td>
                                            <td>@data.DebtNote</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    @foreach (var data in requiredDetails.debt_info_list.Where(x => x.Username == requiredDetails.CurrentUserUsername && x.TransactionType == "Debt" && x.DebtAmount.ToString() == HighestDebt.ToString()).ToList())
                                    {
                                        <tr>
                                            <td>@data.DebtId</td>
                                            <td>@data.TransactionType</td>
                                            <td>@data.DebtTitle</td>
                                            <td>@data.DebtDate.ToString("yyyy-MM-dd")</td>
                                            <td>@data.DebtSource</td>
                                            <td>@requiredDetails.GetCurrencySymbol(requiredDetails.CurrencyTypeUser) @data.DebtAmount</td>
                                            <td>@data.TransactionFlow</td>
                                            <td>@data.DebtStatus</td>
                                            <td>@data.TransactionStatus</td>
                                            <td>@data.Username</td>
                                            <td>@data.DebtNote</td>
                                        </tr>
                                    }
                                }

                            }

                        </tbody>
                    </table>
                </div>
            </div>
            </div>
        </div>
 </div>
</div> @* main container *@


<script>
    function showAlert(message) {
    alert(message);
    }

    function showConfirm(message, dotNetHelper) {
    if (confirm(message)) {
    dotNetHelper.invokeMethodAsync("ProceedWithDebt");
    } else {
    dotNetHelper.invokeMethodAsync("CancelTransaction");
    }
    }

</script>

